# FlexGet Configuration for Synology DSM and Transmission
# Download and sort from a manual and wishlist feed, and download and unpack packed episodes from a feed using Transmission and unrar.

secrets: secrets.yml

templates:

  transmission:
    transmission:
      host: localhost
      port: 9091
      username: '{{ secrets.transmission.username }}'
      password: '{{ secrets.transmission.password }}'

  email:
    email:
      to: '{{ secrets.email.to }}'
      from: '{{ secrets.email.from }}'
      subject: 'DiskStation Notification'
      smtp_host: 'smtp.gmail.com'
      smtp_port: 465
      smtp_ssl: true
      smtp_username: '{{ secrets.email.smtp_username }}'
      smtp_password: '{{ secrets.email.smtp_password }}'

  series:
    series:
      series:
        - Some Show
        - Another Show

tasks:

  manual:
    rss:
      url: '{{ secrets.rss.manual }}'
    transmission:
      path: '/volume1/Downloads/Movies'
    template:
      - transmission
      - email
    accept_all: yes

  wishlist:
    rss:
      url: '{{ secrets.rss.wishlist }}'
    transmission:
      path: '/volume1/Downloads/Movies'
    template:
      - transmission
      - email
    accept_all: yes
    quality: 1080p bluray h264
    regexp:
      reject:
        - \b3-?D\b: {from: title}
        - \bHalf-SBS\b: {from: title}
        - \bExtras\b: {from: title}
        - \bHybrid\b: {from: title}

  series:
    rss:
      url: '{{ secrets.rss.series }}'
    transmission:
      path: '/volume1/Downloads/Series'
    template:
      - series
      - transmission
      - email
    configure_series:
      settings:
        timeframe: 6 hours
        target: 1080p hdtv h264
        quality: 720p hdtv h264
        specials: no

  sort-manual-wishlist:
    find:
      path: '/volume1/Downloads/Movies'
      recursive: true
      regexp: .*\.(mkv)$
    metainfo_series: yes
    imdb_lookup: yes
    accept_all: yes
    seen: local
    template: email
    regexp:
      reject:
        - sample
    set:
      output_path: /volume1/Movies
      output_folder: "{{ location|pathname }}"
    exec: 'mkdir -p "{{ output_path }}/{{ output_folder }}" && cp "{{ location|pathdir }}/{{ location|pathname }}.mkv" "{{ output_path }}/{{ output_folder }}"'

  sort-series:
    find:
      path: '/volume1/Downloads/Series'
      recursive: true
      regexp: .*\.(rar)$
    template:
      - series
      - email
    accept_all: true
    only_new: yes
    seen: local
    require_field: series_name
    series:
      settings:
        series:
          parse_only: yes
    regexp:
      reject:
        - sample
    set:
      output_path: /volume1/Series
    exec: mkdir -p "{{ output_path }}/{{ series_name|replace('\'','') }}/Season {{ series_season }}" && unrar e -r -o- "{{ location }}" "{{ output_path }}/{{ series_name|replace('\'','') }}/Season {{ series_season }}"

schedules:
  - tasks: [manual, wishlist]
    interval:
      minutes: 5
  - tasks: series
    interval:
      minutes: 30
  - tasks: [sort-manual-wishlist, sort-series]
    interval:
      minutes: 15
